Hey, here begins my journy - building a super simple CHIP-8 emulator!

    - This file contains general notes and tasks, mainly to organize my thoughts.
    - Here are some of the resources I use:
        * https://blog.scottlogic.com/2017/12/13/chip8-emulator-webassembly-rust.html
        * https://blog.coreytaylor.me/building-a-chip8-emulator-in-rust-part-i-1a007f56451
        * http://www.multigesture.net/articles/how-to-write-an-emulator-chip-8-interpreter/
        * http://devernay.free.fr/hacks/chip8/C8TECH10.HTM - *Architecure specification*
        * http://www.multigesture.net/wp-content/uploads/mirror/goldroad/chip8.shtml

I will start with no sound and with printing to display and then move to writing to screen 
(watch the video about the emulator development. He had a suggestion for such library).

Notes:
    General notes about the chip-8 architecture.
    Memory:
        4KB of memory (4096 byes). The original interpreter was located in the first 512 bytes,
        and the actual ROM would go from 0x200 - 0xFFF. Notes that some computers started reading
        from 0x600, but it shouldn't worry us. We don't have to worry at all about it,
        our interpreter won't live in this "memory", we just set our program counter to 0x200;
    Registers:
        There are multiple registers in the chip-8 architecture. There are 16 general-purpose
        registers names Vx (x=0-F). VF is a flag and should not be modified. There is also the I
        register used to store memory addresses (only uses 12 bits, so its size is 16 bits - 2bytes).
        There are two timers: sound and delay registers. More on them in "Research".
        There is of course the program counter (PC) register, and the stack pointer (SP) which is *8*
        bit. SP is used to access the stack. Stack is an array of 16 16bit values used to store
        subroutines return addresses. We can only have 16 nested routines.
    Display:
        64x32 display. It can draw on the screen using pre-defined sprites (0-9, A-F). The sprites
        are 5x4 and should be put in the unused memory space (0x0); Easiest way is just to define
        them as binary;
    Opcodes:
        I need to implement about ~35 different opcodes (some of them are no longer in use, 
        some of them are for the 'super achitecture'). I will implement the basic ones.
        See instruction set for chip8 online for full opcode list. 
        Each opcode is 2bytes (0xABCD), so every cycle we increment the pc by 2.
        I will use bitwise operation on the opcode in order to extract different bits out of it.
General:
    ✔ Create a struct that represent a chip-8 machine @started(20-04-27 17:43) @done(20-04-27 18:38) @lasted(55m25s)
        It should contain memory, stack, sp, pc, 16 registers, i register, two timers (?)
        display + keyboard
    ✔ Read a ROM from file and place it in memory correctly. @started(20-04-27 18:38) @done(20-04-27 19:24) @lasted(46m9s)
        I can now load a rom to RAM (at 0x200). In addition to that, I wrote a function thats print
        the memory starting from specified location. This way I can verify the memory looks as 
        it should be.
    ☐ Create a basic games loop
        ✔ Decode an opcode @started(20-04-28 12:52) @done(20-04-28 14:05) @lasted(1h13m58s)
        ✔ Extract from it the 4 nibbles + kk, nnn, n, x, y. @started(20-04-28 14:06) @done(20-04-28 14:32) @lasted(26m10s)
        ☐ Implement opcodes: @started(20-04-28 14:33)
            There are about 35 opcodes which I need to implement 
        ☐ Hanlde timers
        ☐ add keyboard array
        ☐ Print to screen - I will start with just printing to console
    ☐ Implement (?) the fmt::debug in order to print the chip8 status



Todo:
    These are research stuff. I don't know exactly how these work
    ☐ Research about chip-8 display
    ☐ Research about chip-8 keyboard
    ☐ Research about timers
